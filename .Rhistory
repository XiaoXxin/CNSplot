comparisons,
plot.B = T,
lab.x = "",
lab.y = "",
title = "",
text.x,
size.text.x = 10,
size.text.y = 10,
size.point = 2,
size.p = 4,
nudge.p = 1.1,
angle.x = 0,
breaks.y = NULL,
start.y = 0,
fill = "white",
jitter.width = 0.1,
aspect.ratio = 0.5){
dat <- reconstruct_dataframe(dat, formula = formula)
res_t <- rstatix::t_test(dat, exp~group, comparisons)
res_t$y = p_line_y(dat, comparisons, nudge.p)
res_t <- cbind(res_t, p_line_x(dat, comparisons))
if("p.adj" %in% colnames(res_t)){
res_t$p.layout <- p_value_format(res_t$p.adj)
}else{
res_t$p.layout <- p_value_format(res_t$p)
}
res_t$x <- rowMeans(res_t[,c("x1","x2")])
dat_sum <- dat %>%
dplyr::group_by(group) %>%
dplyr::summarise(mean = mean(exp),
n = length(exp),
sd = sd(exp),
sem = sd/sqrt(n))
while(length(fill) < nrow(dat_sum)){
fill <- c(fill,fill)
}
fill <- fill[1:nrow(dat_sum)]
if(is.null(text.x)){text.x = levels}
p <- ggplot(dat_sum, aes(x = group, y = mean, fill = group))+
labs(x= lab.x, y = lab.y)+
guides(fill = "none")+
ggtitle(title)+
scale_x_discrete(labels = text.x)+
scale_y_continuous(expand = c(0,0), n.breaks = breaks.y)+
scale_fill_manual(values = fill)+
theme_bw()+
theme(aspect.ratio = aspect.ratio,
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x = element_text(size = size.text.x, angle = angle.x, vjust = 0.5),
axis.text.y = element_text(size = size.text.y))+
coord_fixed(ylim = c(start.y, max(res_t$y)*1.1))
if(plot.B){
p <- p+geom_bar(stat = "identity", color = "black", alpha = 0.6, width=0.6)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}else{
p <- p+geom_errorbar(aes(x = group, ymin = mean, ymax = mean),
width = 0.5, color = "black", alpha = 0.8, linewidth = 1)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}
p <- p+geom_quasirandom(data = dat, aes(y = exp),method = "pseudorandom",
shape = 21, size = size.point, show.legend = FALSE,
color = "black",width = jitter.width)
#geom_jitter(data = dat, aes(y = exp),shape = 21, size = size.point, show.legend = FALSE, color = "black",width = jitter.width)
p <- p+geom_segment(data = res_t, aes(x = x1, xend = x2, y = y, yend = y),
linewidth = 0.3, inherit.aes = F)+
geom_text(data = res_t, aes(x = x-0.2, y = y*1.02, label = p.layout),
size = size.p, vjust = 0, hjust = 0, nudge_x = 0, inherit.aes = F)
p
}
#####
dat = exp_sum[exp_sum$gene == "CD11b",]
dat$group <- factor(dat$group, levels = c("CON", "UTD", "tu1", "tu2"))
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
get_formula_left <- function(formula){
deparse(formula[[2]])
}
get_formula_right <- function(formula){
attr(stats::terms(formula), "term.labels")
}
reconstruct_dataframe <- function(dat, formula){
data.frame(exp = dat[,get_formula_left(formula)],
group = dat[,get_formula_right(formula)])
}
p_line_x <- function(dat, comparisons){
levels <- levels(dat$group)
p_value_x <- lapply(comparisons, function(x) match(x, levels)) %>%
Reduce(rbind,.) %>%
magrittr::set_colnames(c("x1", "x2")) %>%
magrittr::set_rownames(1:nrow(.))
p_value_x
}
p_line_y <- function(dat, comparisons, nudge.p){
levels <- levels(dat$group)
comparisons <- lapply(comparisons, function(x) match(x, levels))
maxs <- dat %>% dplyr::group_by(group) %>% dplyr::summarise(max = max(exp))
while(length(nudge.p) < length(comparisons)){
nudge.p <- c(nudge.p,nudge.p)
}
nudge.p <- nudge.p[1:length(comparisons)]
p.y <- c()
for (i in 1:length(comparisons)) {
compar <- comparisons[[i]]
max <- maxs$max[maxs$group %in% levels[compar[1]:compar[2]]] %>% max()*nudge.p[i]
p.y[i] <- max
maxs$max[maxs$group %in% levels[compar[1]:compar[2]]] <- max
}
p.y
}
p_value_format <- function(p){
for (i in 1:length(p)) {
if(p[i] < 0.001){
p[i] <- "p < 0.001"
}else{
p[i] <- paste0("p = ", round(as.numeric(p[i]), 4))
}
}
p
}
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.5,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
formula = exp ~ group,
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.3,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
#' @param start.y start of y-axis
#' @param fill fill colors
#' @param jitter.width jitter width of the points
#' @param aspect.ratio ratio of the x axis and y axis
#' @param nudge.p nudge of p values
#'
#' @return a ggplot2 plot
#' @export
#'
#' @examples
plotBPE_T <- function(dat,
formula,
comparisons,
plot.B = T,
lab.x = "",
lab.y = "",
title = "",
text.x,
size.text.x = 10,
size.text.y = 10,
size.point = 2,
size.p = 4,
nudge.p = 1.1,
angle.x = 0,
breaks.y = NULL,
start.y = 0,
fill = "white",
jitter.width = 0.1,
aspect.ratio = 0.5){
dat <- reconstruct_dataframe(dat, formula = formula)
res_t <- rstatix::t_test(dat, exp~group, comparisons)
res_t$y = p_line_y(dat, comparisons, nudge.p)
res_t <- cbind(res_t, p_line_x(dat, comparisons))
if("p.adj" %in% colnames(res_t)){
res_t$p.layout <- p_value_format(res_t$p.adj)
}else{
res_t$p.layout <- p_value_format(res_t$p)
}
res_t$x <- rowMeans(res_t[,c("x1","x2")])
dat_sum <- dat %>%
dplyr::group_by(group) %>%
dplyr::summarise(mean = mean(exp),
n = length(exp),
sd = sd(exp),
sem = sd/sqrt(n))
while(length(fill) < nrow(dat_sum)){
fill <- c(fill,fill)
}
fill <- fill[1:nrow(dat_sum)]
if(is.null(text.x)){text.x = levels}
p <- ggplot(dat_sum, aes(x = group, y = mean, fill = group))+
labs(x= lab.x, y = lab.y)+
guides(fill = "none")+
ggtitle(title)+
scale_x_discrete(labels = text.x)+
scale_y_continuous(expand = c(0,0), n.breaks = breaks.y)+
scale_fill_manual(values = fill)+
theme_bw()+
theme(aspect.ratio = aspect.ratio,
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x = element_text(size = size.text.x, angle = angle.x, vjust = 0.5),
axis.text.y = element_text(size = size.text.y))+
coord_fixed(ylim = c(start.y, max(res_t$y)*1.1))
if(plot.B){
p <- p+geom_bar(stat = "identity", color = "black", alpha = 0.6, width=0.6)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}else{
p <- p+geom_errorbar(aes(x = group, ymin = mean, ymax = mean),
width = 0.5, color = "black", alpha = 0.8, linewidth = 1)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}
p <- p+geom_quasirandom(data = dat, aes(y = exp), method = "tukey",
shape = 21, size = size.point, show.legend = FALSE,
color = "black",width = jitter.width)
#geom_jitter(data = dat, aes(y = exp),shape = 21, size = size.point, show.legend = FALSE, color = "black",width = jitter.width)
p <- p+geom_segment(data = res_t, aes(x = x1, xend = x2, y = y, yend = y),
linewidth = 0.3, inherit.aes = F)+
geom_text(data = res_t, aes(x = x-0.2, y = y*1.02, label = p.layout),
size = size.p, vjust = 0, hjust = 0, nudge_x = 0, inherit.aes = F)
p
}
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.3,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
#' @param start.y start of y-axis
#' @param fill fill colors
#' @param jitter.width jitter width of the points
#' @param aspect.ratio ratio of the x axis and y axis
#' @param nudge.p nudge of p values
#'
#' @return a ggplot2 plot
#' @export
#'
#' @examples
plotBPE_T <- function(dat,
formula,
comparisons,
plot.B = T,
lab.x = "",
lab.y = "",
title = "",
text.x,
size.text.x = 10,
size.text.y = 10,
size.point = 2,
size.p = 4,
nudge.p = 1.1,
angle.x = 0,
breaks.y = NULL,
start.y = 0,
fill = "white",
jitter.width = 0.1,
aspect.ratio = 0.5){
dat <- reconstruct_dataframe(dat, formula = formula)
res_t <- rstatix::t_test(dat, exp~group, comparisons)
res_t$y = p_line_y(dat, comparisons, nudge.p)
res_t <- cbind(res_t, p_line_x(dat, comparisons))
if("p.adj" %in% colnames(res_t)){
res_t$p.layout <- p_value_format(res_t$p.adj)
}else{
res_t$p.layout <- p_value_format(res_t$p)
}
res_t$x <- rowMeans(res_t[,c("x1","x2")])
dat_sum <- dat %>%
dplyr::group_by(group) %>%
dplyr::summarise(mean = mean(exp),
n = length(exp),
sd = sd(exp),
sem = sd/sqrt(n))
while(length(fill) < nrow(dat_sum)){
fill <- c(fill,fill)
}
fill <- fill[1:nrow(dat_sum)]
if(is.null(text.x)){text.x = levels}
p <- ggplot(dat_sum, aes(x = group, y = mean, fill = group))+
labs(x= lab.x, y = lab.y)+
guides(fill = "none")+
ggtitle(title)+
scale_x_discrete(labels = text.x)+
scale_y_continuous(expand = c(0,0), n.breaks = breaks.y)+
scale_fill_manual(values = fill)+
theme_bw()+
theme(aspect.ratio = aspect.ratio,
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x = element_text(size = size.text.x, angle = angle.x, vjust = 0.5),
axis.text.y = element_text(size = size.text.y))+
coord_fixed(ylim = c(start.y, max(res_t$y)*1.1))
if(plot.B){
p <- p+geom_bar(stat = "identity", color = "black", alpha = 0.6, width=0.6)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}else{
p <- p+geom_errorbar(aes(x = group, ymin = mean, ymax = mean),
width = 0.5, color = "black", alpha = 0.8, linewidth = 1)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}
p <- p+geom_quasirandom(data = dat, aes(y = exp), method = "tukeyDense",
shape = 21, size = size.point, show.legend = FALSE,
color = "black",width = jitter.width)
#geom_jitter(data = dat, aes(y = exp),shape = 21, size = size.point, show.legend = FALSE, color = "black",width = jitter.width)
p <- p+geom_segment(data = res_t, aes(x = x1, xend = x2, y = y, yend = y),
linewidth = 0.3, inherit.aes = F)+
geom_text(data = res_t, aes(x = x-0.2, y = y*1.02, label = p.layout),
size = size.p, vjust = 0, hjust = 0, nudge_x = 0, inherit.aes = F)
p
}
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.3,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.2,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.2,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
help(geom_beeswarm)
#' @param start.y start of y-axis
#' @param fill fill colors
#' @param jitter.width jitter width of the points
#' @param aspect.ratio ratio of the x axis and y axis
#' @param nudge.p nudge of p values
#'
#' @return a ggplot2 plot
#' @export
#'
#' @examples
plotBPE_T <- function(dat,
formula,
comparisons,
plot.B = T,
lab.x = "",
lab.y = "",
title = "",
text.x,
size.text.x = 10,
size.text.y = 10,
size.point = 2,
size.p = 4,
nudge.p = 1.1,
angle.x = 0,
breaks.y = NULL,
start.y = 0,
fill = "white",
jitter.width = 0.1,
aspect.ratio = 0.5){
dat <- reconstruct_dataframe(dat, formula = formula)
res_t <- rstatix::t_test(dat, exp~group, comparisons)
res_t$y = p_line_y(dat, comparisons, nudge.p)
res_t <- cbind(res_t, p_line_x(dat, comparisons))
if("p.adj" %in% colnames(res_t)){
res_t$p.layout <- p_value_format(res_t$p.adj)
}else{
res_t$p.layout <- p_value_format(res_t$p)
}
res_t$x <- rowMeans(res_t[,c("x1","x2")])
dat_sum <- dat %>%
dplyr::group_by(group) %>%
dplyr::summarise(mean = mean(exp),
n = length(exp),
sd = sd(exp),
sem = sd/sqrt(n))
while(length(fill) < nrow(dat_sum)){
fill <- c(fill,fill)
}
fill <- fill[1:nrow(dat_sum)]
if(is.null(text.x)){text.x = levels}
p <- ggplot(dat_sum, aes(x = group, y = mean, fill = group))+
labs(x= lab.x, y = lab.y)+
guides(fill = "none")+
ggtitle(title)+
scale_x_discrete(labels = text.x)+
scale_y_continuous(expand = c(0,0), n.breaks = breaks.y)+
scale_fill_manual(values = fill)+
theme_bw()+
theme(aspect.ratio = aspect.ratio,
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x = element_text(size = size.text.x, angle = angle.x, vjust = 0.5),
axis.text.y = element_text(size = size.text.y))+
coord_fixed(ylim = c(start.y, max(res_t$y)*1.1))
if(plot.B){
p <- p+geom_bar(stat = "identity", color = "black", alpha = 0.6, width=0.6)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}else{
p <- p+geom_errorbar(aes(x = group, ymin = mean, ymax = mean),
width = 0.5, color = "black", alpha = 0.8, linewidth = 1)+
geom_errorbar(aes(x = group, ymin = mean-sem, ymax = mean+sem),
width = 0.3, color = "black", alpha = 0.8, linewidth = 1)
}
p <- p+geom_beeswarm(data = dat, aes(y = exp), cex=2,priority='density',
shape = 21, size = size.point, show.legend = FALSE,
color = "black",width = jitter.width)
#geom_jitter(data = dat, aes(y = exp),shape = 21, size = size.point, show.legend = FALSE, color = "black",width = jitter.width)
p <- p+geom_segment(data = res_t, aes(x = x1, xend = x2, y = y, yend = y),
linewidth = 0.3, inherit.aes = F)+
geom_text(data = res_t, aes(x = x-0.2, y = y*1.02, label = p.layout),
size = size.p, vjust = 0, hjust = 0, nudge_x = 0, inherit.aes = F)
p
}
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.2,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "blue",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.2,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
plotBPE_T(dat = dat,
formula = exp ~ group,
comparisons = list(c("CON","UTD"),c("UTD","tu1"),c("UTD","tu2")),
text.x = c("PBS", "UTD", "LY9", "CD247"),
fill = "white",
lab.y = "Relative mRNA expression",
title = "CD11B",
angle.x = 45,
size.p = 4,
jitter.width = 0.2,
nudge.p = c(1200,1.1,1.1),
aspect.ratio = 1.8)
setwd("W:/library_lib132/results/R/CNSplot/R")
setwd("W:/library_lib132/results/R/CNSplot")
usethis::use_package("ggbeeswarm")
help(dunn_test)
